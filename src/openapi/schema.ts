/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/projects/hierarchy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List projects hierarchically.
         * @description <br>Return the complete project hierarchy.
         *
         *     See [Display the specified project.](#projects-GETapi-v1-projects--project_id-) for the returned attributes.
         */
        get: operations["listProjectsHierarchically"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List projects.
         * @description <br>Return a list containing all projects.
         *
         *     See [Display the specified project.](#projects-GETapi-v1-projects--project_id-) for the returned attributes.
         */
        get: operations["listProjects"];
        put?: never;
        /**
         * Create project.
         * @description <br>Create a new project.
         *
         *     See [Display the specified project.](#projects-GETapi-v1-projects--project_id-) for the returned attributes.
         *
         *     <aside class="notice">
         *     If you would like to add rules to a project, please <a href="https://timingapp.com/contact" target="_blank" >contact us</a> for advice.
         *     </aside>
         */
        post: operations["createProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the project to display.
                 * @example 1
                 */
                project_id: number;
            };
            cookie?: never;
        };
        /**
         * Show project.
         * @description <br>Display the specified project.
         *
         *     The following attributes will be returned:
         *
         *      - `self`: A reference to the entity itself, relative to the API root.
         *      - `title`: The project's title.
         *      - `title_chain`: An array containing the title of the project and all its ancestors. Example: `["Parent", "Child"]`
         *      - `color`: The project's color, in hexadecimal format (`#RRGGBB`). Example: `#FF0000`
         *      - `productivity_score`: The project's productivity rating, between -1 (very unproductive) and 1 (very productive). Example: `1`
         *      - `is_archived`: Whether the project has been archived. Defaults to false. Example: `false`
         *      - `parent`: A reference to the enclosing project.
         *      - `children`: The project's children.
         *      - `team_id`: The ID of the team that this project belongs to, if applicable.
         *
         *     <aside class="notice">
         *     Child projects are provided as references; i.e. they only contain the <code>self</code> attribute.
         *     </aside>
         */
        get: operations["showProject"];
        /**
         * Update project.
         * @description <br>Update the specified project.
         *
         *     See [Display the specified project.](#projects-GETapi-v1-projects--project_id-) for the returned attributes.
         *
         *     <aside class="notice">
         *     Omitted fields will not be updated, even when using the `PUT` method.
         *     </aside>
         *
         *     <aside class="notice">
         *     Changing a project's parent or children is currently not possible.
         *     </aside>
         *
         *     <aside class="notice">
         *     If you would like to add rules to a project, please <a href="https://timingapp.com/contact" target="_blank" >contact us</a> for advice.
         *     </aside>
         */
        put: operations["updateProject"];
        post?: never;
        /**
         * Delete project.
         * @description <br>Delete the specified project and all of its children.
         */
        delete: operations["deleteProject"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate report.
         * @description <br>Generate a report that can contain both time entries and app usage.
         *
         *     Returns a JSON array with several rows; each row includes the total duration (in seconds) belonging to the
         *     corresponding other (configurable) columns.
         *
         *     The `include_app_usage` and `include_team_members` parameters govern whether to include app usage (otherwise, only time entries are returned) as well as data for other team members.
         *     <br>The `start_date_min`, `start_date_max`, `projects`(also see `include_child_projects`) and `search_query` parameters allow filtering the returned data.
         *     <br>The `columns`, `project_grouping_level`, `include_project_data`, `timespan_grouping_mode`, and `sort` parameters govern the presentation of the returned data.
         *
         *     <aside class="notice">
         *     Fetching large amounts of app usage can put a substantial amount of load on our servers, so please be mindful before frequently requesting large amounts of data using this API.
         *     </aside>
         *
         *     <aside class="notice">
         *     If no date range filter is provided by setting <em>both</em> `start_date_min` <em>and</em> `start_date_max`,
         *     this query returns all time entries between midnight (UTC) 30 days ago and end of day (UTC) today.
         *     </aside>
         */
        get: operations["generateReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/teams/{team_id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the team to list members for.
                 * @example 1
                 */
                team_id: number;
            };
            cookie?: never;
        };
        /**
         * List team members.
         * @description <br>Return a list containing all active members of the given team.
         *
         *     Members with pending invitations will be excluded.
         *
         *     The following attributes will be returned:
         *
         *      - `self`: A reference to the entity itself, relative to the API root.
         *      - `email`: The team member's email address.
         *      - `name`: The team member's name. May be null if the team member has not entered a name in their account profile.
         */
        get: operations["listTeamMembers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List teams.
         * @description <br>Return a list containing all the teams you are a member of.
         */
        get: operations["listTeams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/time-entries/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start timer.
         * @description <br>Start a new timer.
         *
         *     This also stops the currently running timer if there is one.
         *
         *     See [Display the specified time entry.](#time-entries-GETapi-v1-time-entries--activity_id-) for the returned attributes.
         *
         *     <aside class="notice">
         *     The title and project fields can not both be empty.
         *     </aside>
         */
        post: operations["startTimer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/time-entries/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Stop timer.
         * @description <br>Stop the currently running timer.
         *
         *     Returns the stopped timer's attributes as listed under [Display the specified time entry.](#time-entries-GETapi-v1-time-entries--activity_id-).
         */
        put: operations["stopTimer"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/time-entries/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show latest time entry.
         * @description <br>Redirect to the latest time entry.
         *
         *     See [Display the specified time entry.](#time-entries-GETapi-v1-time-entries--activity_id-) for the route the
         *     redirect points to.
         *
         *     <aside class="notice">
         *     If no time entry is found, a 404 response will be returned.
         *     </aside>
         *     <aside class="notice">
         *     This route is only available for <code>GET</code> requests. If you'd like to e.g. <em>edit</em> the latest time
         *     entry, use this route to retrieve a link to the desired entry, then use that link to assemble a new request for
         *     the desired action.
         *     </aside>
         */
        get: operations["showLatestTimeEntry"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/time-entries/running": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show running timer.
         * @description <br>Redirect to the currently running timer.
         *
         *     See [Display the specified time entry.](#time-entries-GETapi-v1-time-entries--activity_id-) for the route the
         *     redirect points to.
         *
         *     <aside class="notice">
         *     If no timer is currently running, a 404 response will be returned.
         *     </aside>
         *     <aside class="notice">
         *     This route is only available for <code>GET</code> requests. If you'd like to e.g. <em>edit</em> the latest time
         *     entry, use this route to retrieve a link to the desired entry, then use that link to assemble a new request for
         *     the desired action.
         *     </aside>
         */
        get: operations["showRunningTimer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/time-entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List time entries.
         * @description <br>Return a list of time entries.
         *
         *     See [Display the specified time entry.](#time-entries-GETapi-v1-time-entries--activity_id-) for the returned attributes.
         *
         *     Items are ordered descending by their `start_date` field.
         *
         *     <aside class="notice">
         *     If no date range filter is provided by setting <em>both</em> `start_date_min` <em>and</em> `start_date_max`,
         *     this query returns all time entries between midnight (UTC) 30 days ago and end of day (UTC) today.
         *     </aside>
         */
        get: operations["listTimeEntries"];
        put?: never;
        /**
         * Create time entry.
         * @description <br>Create a new time entry.
         *
         *     See [Display the specified time entry.](#time-entries-GETapi-v1-time-entries--activity_id-) for the returned attributes.
         *
         *     <aside class="notice">
         *     The title and project fields can not both be empty.
         *     </aside>
         */
        post: operations["createTimeEntry"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/time-entries/{activity_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the activity to display.
                 * @example 1
                 */
                activity_id: string;
            };
            cookie?: never;
        };
        /**
         * Show time entry.
         * @description <br>Display the specified time entry.
         *
         *     The following attributes will be returned:
         *
         *      - `self`: A link to the entity itself, relative to the API root.
         *      - `start_date`: The time entry's start date and time.
         *      - `end_date`: The time entry's end date and time.
         *      - `duration`: The time entry's total duration, in seconds.
         *      - `project`: The project this time entry is associated with.
         *      - `title`: The time entry's title.
         *      - `notes`: The time entry's notes.
         *      - `is_running`: Whether the time entry is currently running. Only one time entry can be running at any given time.
         */
        get: operations["showTimeEntry"];
        /**
         * Update time entry.
         * @description <br>Update the specified time entry.
         *
         *     See [Display the specified time entry.](#time-entries-GETapi-v1-time-entries--activity_id-) for the returned attributes.
         *
         *     <aside class="notice">
         *     Omitted fields will not be updated, even when using the `PUT` method.
         *     </aside>
         *
         *     <aside class="notice">
         *     A time entry's title and project fields can not both be empty.
         *     </aside>
         */
        put: operations["updateTimeEntry"];
        post?: never;
        /**
         * Delete time entry.
         * @description <br>Delete the specified time entry.
         */
        delete: operations["deleteTimeEntry"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listProjectsHierarchically: {
        parameters: {
            query?: {
                /**
                 * @description The ID of the team to list projects for. Can be omitted to list the user's private projects. See [Return a list containing all the teams you are a member of.](#teams-GETapi-v1-teams) for obtaining a team ID to provide here.
                 * @example null
                 */
                team_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [
                         *       {
                         *         "self": "/projects/1",
                         *         "team_id": null,
                         *         "title": "Project at root level",
                         *         "title_chain": [
                         *           "Project at root level"
                         *         ],
                         *         "color": "#FF0000",
                         *         "productivity_score": 1,
                         *         "is_archived": false,
                         *         "notes": null,
                         *         "children": [
                         *           {
                         *             "self": "/projects/2",
                         *             "team_id": null,
                         *             "title": "Unproductive child project",
                         *             "title_chain": [
                         *               "Project at root level",
                         *               "Unproductive child project"
                         *             ],
                         *             "color": "#00FF00",
                         *             "productivity_score": -1,
                         *             "is_archived": false,
                         *             "notes": null,
                         *             "children": [],
                         *             "parent": {
                         *               "self": "/projects/1"
                         *             },
                         *             "custom_fields": []
                         *           }
                         *         ],
                         *         "parent": null,
                         *         "custom_fields": []
                         *       }
                         *     ] */
                        data?: {
                            /** @example /projects/1 */
                            self?: string;
                            /** @example null */
                            team_id?: string;
                            /** @example Project at root level */
                            title?: string;
                            /** @example [
                             *       "Project at root level"
                             *     ] */
                            title_chain?: string[];
                            /** @example #FF0000 */
                            color?: string;
                            /** @example 1 */
                            productivity_score?: number;
                            /** @example false */
                            is_archived?: boolean;
                            /** @example null */
                            notes?: string;
                            /** @example [
                             *       {
                             *         "self": "/projects/2",
                             *         "team_id": null,
                             *         "title": "Unproductive child project",
                             *         "title_chain": [
                             *           "Project at root level",
                             *           "Unproductive child project"
                             *         ],
                             *         "color": "#00FF00",
                             *         "productivity_score": -1,
                             *         "is_archived": false,
                             *         "notes": null,
                             *         "children": [],
                             *         "parent": {
                             *           "self": "/projects/1"
                             *         },
                             *         "custom_fields": []
                             *       }
                             *     ] */
                            children?: {
                                /** @example /projects/2 */
                                self?: string;
                                /** @example null */
                                team_id?: string;
                                /** @example Unproductive child project */
                                title?: string;
                                /** @example [
                                 *       "Project at root level",
                                 *       "Unproductive child project"
                                 *     ] */
                                title_chain?: string[];
                                /** @example #00FF00 */
                                color?: string;
                                /** @example -1 */
                                productivity_score?: number;
                                /** @example false */
                                is_archived?: boolean;
                                /** @example null */
                                notes?: string;
                                /** @example [] */
                                children?: unknown[];
                                parent?: {
                                    /** @example /projects/1 */
                                    self?: string;
                                };
                                custom_fields?: Record<string, never>;
                            }[];
                            /** @example null */
                            parent?: string;
                            custom_fields?: Record<string, never>;
                        }[];
                    };
                };
            };
        };
    };
    listProjects: {
        parameters: {
            query?: {
                /**
                 * @description Filter for projects whose title contains all words in this parameter. The search is case-insensitive but diacritic-sensitive.
                 * @example root
                 */
                title?: string;
                /**
                 * @description If set to `1`, archived projects and their children will not be included in the result.
                 * @example 1
                 */
                hide_archived?: boolean;
                /**
                 * @description The ID of the team to list projects for. Can be omitted to list the user's private projects. See [Return a list containing all the teams you are a member of.](#teams-GETapi-v1-teams) for obtaining a team ID to provide here.
                 * @example null
                 */
                team_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [
                         *       {
                         *         "self": "/projects/1",
                         *         "team_id": null,
                         *         "title": "Project at root level",
                         *         "title_chain": [
                         *           "Project at root level"
                         *         ],
                         *         "color": "#FF0000",
                         *         "productivity_score": 1,
                         *         "is_archived": false,
                         *         "notes": null,
                         *         "children": [
                         *           {
                         *             "self": "/projects/2"
                         *           }
                         *         ],
                         *         "parent": null,
                         *         "custom_fields": []
                         *       }
                         *     ] */
                        data?: {
                            /** @example /projects/1 */
                            self?: string;
                            /** @example null */
                            team_id?: string;
                            /** @example Project at root level */
                            title?: string;
                            /** @example [
                             *       "Project at root level"
                             *     ] */
                            title_chain?: string[];
                            /** @example #FF0000 */
                            color?: string;
                            /** @example 1 */
                            productivity_score?: number;
                            /** @example false */
                            is_archived?: boolean;
                            /** @example null */
                            notes?: string;
                            /** @example [
                             *       {
                             *         "self": "/projects/2"
                             *       }
                             *     ] */
                            children?: {
                                /** @example /projects/2 */
                                self?: string;
                            }[];
                            /** @example null */
                            parent?: string;
                            custom_fields?: Record<string, never>;
                        }[];
                    };
                };
            };
        };
    };
    createProject: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The project's title.
                     * @example Acme Inc.
                     */
                    title: string;
                    /**
                     * @description A reference to an existing project. The new project will be appended to the parent's children. Can be a project reference in the form `"/projects/1"`, a project title (e.g. `"Project at root level"`), or an array with the project's entire title chain (e.g. `["Project at root level", "Unproductive child project"]`).
                     * @example /projects/1
                     */
                    parent?: string;
                    /**
                     * @description The project's color, in hexadecimal format (`#RRGGBB`). If omitted, a color with random hue, 70% saturation and 100% value will be used.
                     * @example #FF0000
                     */
                    color?: string;
                    /**
                     * @description The project's productivity rating, between -1 (very unproductive) and 1 (very productive). Defaults to 1.
                     * @example 1
                     */
                    productivity_score?: number;
                    /**
                     * @description Whether the project has been archived. Defaults to false.
                     * @example false
                     */
                    is_archived?: boolean;
                    /**
                     * @description The ID of the team to add the project to. See [Return a list containing all the teams you are a member of.](#teams-GETapi-v1-teams) for obtaining a team ID to provide here.
                     * @example null
                     */
                    team_id?: number;
                    /**
                     * @description The project's notes.
                     * @example Some more detailed notes
                     */
                    notes?: string;
                    /**
                     * @description A list of custom field name/value pairs to store. For more details, see [Custom fields](#custom-fields).
                     * @example {
                     *       "field_name": "field_value"
                     *     }
                     */
                    custom_fields?: Record<string, never>;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example /projects/2 */
                            self?: string;
                            /** @example null */
                            team_id?: string;
                            /** @example Acme Inc. */
                            title?: string;
                            /** @example [
                             *       "Project at root level",
                             *       "Acme Inc."
                             *     ] */
                            title_chain?: string[];
                            /** @example #FF0000 */
                            color?: string;
                            /** @example 1 */
                            productivity_score?: number;
                            /** @example false */
                            is_archived?: boolean;
                            /** @example Some more detailed notes */
                            notes?: string;
                            /** @example [] */
                            children?: unknown[];
                            parent?: {
                                /** @example /projects/1 */
                                self?: string;
                            };
                            custom_fields?: {
                                /** @example field_value */
                                field_name?: string;
                            };
                        };
                        links?: {
                            /** @example https://web.timingapp.com/api/v1/time-entries?project[]=/projects/2 */
                            "time-entries"?: string;
                        };
                    };
                };
            };
        };
    };
    showProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the project to display.
                 * @example 1
                 */
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example /projects/1 */
                            self?: string;
                            /** @example null */
                            team_id?: string;
                            /** @example Project at root level */
                            title?: string;
                            /** @example [
                             *       "Project at root level"
                             *     ] */
                            title_chain?: string[];
                            /** @example #FF0000 */
                            color?: string;
                            /** @example 1 */
                            productivity_score?: number;
                            /** @example false */
                            is_archived?: boolean;
                            /** @example null */
                            notes?: string;
                            /** @example [
                             *       {
                             *         "self": "/projects/2"
                             *       }
                             *     ] */
                            children?: {
                                /** @example /projects/2 */
                                self?: string;
                            }[];
                            /** @example null */
                            parent?: string;
                            custom_fields?: Record<string, never>;
                        };
                        links?: {
                            /** @example https://web.timingapp.com/api/v1/time-entries?project[]=/projects/1 */
                            "time-entries"?: string;
                        };
                    };
                };
            };
        };
    };
    updateProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the project to display.
                 * @example 1
                 */
                project_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The project's title.
                     * @example Acme Inc.
                     */
                    title: string;
                    /**
                     * @description The project's color, in hexadecimal format (`#RRGGBB`).
                     * @example #FF0000
                     */
                    color?: string;
                    /**
                     * @description The project's productivity rating, between -1 (very unproductive) and 1 (very productive).
                     * @example 1
                     */
                    productivity_score?: number;
                    /**
                     * @description Whether the project has been archived.
                     * @example false
                     */
                    is_archived?: boolean;
                    /**
                     * @description The project's notes.
                     * @example Some more detailed notes
                     */
                    notes?: string;
                    /**
                     * @description A list of custom field name/value pairs to update. For more details, see [Custom fields](#custom-fields).
                     * @example {
                     *       "field_name": "field_value"
                     *     }
                     */
                    custom_fields?: Record<string, never>;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example /projects/1 */
                            self?: string;
                            /** @example null */
                            team_id?: string;
                            /** @example Acme Inc. */
                            title?: string;
                            /** @example [
                             *       "Acme Inc."
                             *     ] */
                            title_chain?: string[];
                            /** @example #FF0000 */
                            color?: string;
                            /** @example 1 */
                            productivity_score?: number;
                            /** @example false */
                            is_archived?: boolean;
                            /** @example Some more detailed notes */
                            notes?: string;
                            /** @example [
                             *       {
                             *         "self": "/projects/2"
                             *       }
                             *     ] */
                            children?: {
                                /** @example /projects/2 */
                                self?: string;
                            }[];
                            /** @example null */
                            parent?: string;
                            custom_fields?: {
                                /** @example field_value */
                                field_name?: string;
                            };
                        };
                        links?: {
                            /** @example https://web.timingapp.com/api/v1/time-entries?project[]=/projects/1 */
                            "time-entries"?: string;
                        };
                    };
                };
            };
        };
    };
    deleteProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the project to display.
                 * @example 1
                 */
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    generateReport: {
        parameters: {
            query?: {
                /**
                 * @description Whether to include app usage in the report. If false, only time entries are returned. Default: `0`
                 * @example 0
                 */
                include_app_usage?: boolean;
                /**
                 * @description If true, the response will also contain time entries that belong to other team members, provided the current user has permission to view them. Default: `0`
                 * @example 0
                 */
                include_team_members?: boolean;
                /**
                 * @description Restricts the query to data associated with the given user. Can be repeated to include time entries from several users.
                 * @example [
                 *       "/users/1"
                 *     ]
                 */
                team_members?: string[];
                /**
                 * @description Restricts the query to data whose start date is equal to or later than this parameter.
                 * @example 2019-01-01
                 */
                start_date_min?: string;
                /**
                 * @description Restricts the query to data whose start date is equal to or earlier than this parameter.
                 * @example 2019-01-01
                 */
                start_date_max?: string;
                /**
                 * @description Restricts the query to data associated with the given project. Can be repeated to include time entries from several projects. If you would like to include time entries that are not assigned to any project, you can provide an empty string, i.e. `projects[]=`
                 * @example [
                 *       "/projects/1"
                 *     ]
                 */
                projects?: string[];
                /**
                 * @description If true, the response will also contain time entries that belong to any child projects of the ones provided in `projects[]`. Default: `0`
                 * @example 1
                 */
                include_child_projects?: boolean;
                /**
                 * @description Restricts the query to time entries whose title and/or notes contain all words in this parameter. The search is case-insensitive but diacritic-sensitive. Note: this parameter can not be used when app usage is included.
                 * @example meeting
                 */
                search_query?: string;
                /**
                 * @description Which columns to show. Can be repeated to provide multiple columns. The `user` column is ignored if `include_team_members` is false. Possible values: `project`, `title`, `notes`, `timespan`, `user`. Default: `user`, `project`, `title`. `start_date` and `end_date` is shown when `timespan` column is sent.
                 * @example [
                 *       "project"
                 *     ]
                 */
                columns?: string[];
                /**
                 * @description When this argument is provided, report lines for projects below the given level will be aggregated by their parent project on the given level. For example, when `project_grouping_level` is 0, all times in sub-projects will be counted towards the corresponding project on the "root" (i.e. highest) level in the project tree. Can be a non-negative integer or -1. The default is -1, which indicates no grouping (i.e. all projects will be returned, regardless of how deep they are in the hierarchy). Requires `columns[]` to contain `project`.
                 * @example 0
                 */
                project_grouping_level?: number;
                /**
                 * @description If true, the properties of each line's project will be included in the response. Requires `columns[]` to contain `project`. Default: `0`
                 * @example 1
                 */
                include_project_data?: boolean;
                /**
                 * @description When this argument is provided, report lines will be aggregated according to the given calendar unit. Possible values: `exact`, `day`, `week`, `month`, `year`. Default: `exact`
                 * @example day
                 */
                timespan_grouping_mode?: string;
                /**
                 * @description Sort the results ascending by the given column; for descending order prefix the column name with a minus sign. Can be repeated to provide multiple sort columns. Default: `-duration`. Examples: `sort[]=-duration` -> Sort descending by duration. `sort[]=user&sort[]=-duration` -> Sort ascending by user, then descending by duration.
                 * @example [
                 *       "-duration"
                 *     ]
                 */
                sort?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [
                         *       {
                         *         "duration": 3600,
                         *         "project": {
                         *           "self": "/projects/1",
                         *           "team_id": null,
                         *           "title": "Project at root level",
                         *           "title_chain": [
                         *             "Project at root level"
                         *           ],
                         *           "color": "#FF0000",
                         *           "productivity_score": 1,
                         *           "is_archived": false,
                         *           "notes": null,
                         *           "parent": null,
                         *           "custom_fields": []
                         *         }
                         *       }
                         *     ] */
                        data?: {
                            /** @example 3600 */
                            duration?: number;
                            project?: {
                                /** @example /projects/1 */
                                self?: string;
                                /** @example null */
                                team_id?: string;
                                /** @example Project at root level */
                                title?: string;
                                /** @example [
                                 *       "Project at root level"
                                 *     ] */
                                title_chain?: string[];
                                /** @example #FF0000 */
                                color?: string;
                                /** @example 1 */
                                productivity_score?: number;
                                /** @example false */
                                is_archived?: boolean;
                                /** @example null */
                                notes?: string;
                                /** @example null */
                                parent?: string;
                                custom_fields?: Record<string, never>;
                            };
                        }[];
                    };
                };
            };
        };
    };
    listTeamMembers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the team to list members for.
                 * @example 1
                 */
                team_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [
                         *       {
                         *         "self": "/users/1",
                         *         "email": "johnny@appleseed.net",
                         *         "name": "Johnny Appleseed"
                         *       }
                         *     ] */
                        data?: {
                            /** @example /users/1 */
                            self?: string;
                            /** @example johnny@appleseed.net */
                            email?: string;
                            /** @example Johnny Appleseed */
                            name?: string;
                        }[];
                    };
                };
            };
        };
    };
    listTeams: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [
                         *       {
                         *         "id": "/teams/1",
                         *         "name": "Demo Team"
                         *       }
                         *     ] */
                        data?: {
                            /** @example /teams/1 */
                            id?: string;
                            /** @example Demo Team */
                            name?: string;
                        }[];
                    };
                };
            };
        };
    };
    startTimer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The date this timer should have started at. Defaults to "now".
                     * @example 2019-01-01T00:00:00+00:00
                     */
                    start_date?: string;
                    /**
                     * @description The project this timer is associated with. Can be a project reference in the form `"/projects/1"`, a project title (e.g. `"Project at root level"`), or an array with the project's entire title chain (e.g. `["Project at root level", "Unproductive child project"]`).
                     * @example Unproductive child project
                     */
                    project?: string;
                    /**
                     * @description The timer's title.
                     * @example Client Meeting
                     */
                    title?: string;
                    /**
                     * @description The timer's notes.
                     * @example Some more detailed notes
                     */
                    notes?: string;
                    /**
                     * @description If true, any existing time entries that overlap with the new time entry will be adjusted to avoid overlap, or deleted altogether. Defaults to false.
                     * @example false
                     */
                    replace_existing?: boolean;
                    /**
                     * @description A list of custom field name/value pairs to store. For more details, see [Custom fields](#custom-fields).
                     * @example {
                     *       "field_name": "field_value"
                     *     }
                     */
                    custom_fields?: Record<string, never>;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example /time-entries/2 */
                            self?: string;
                            /** @example 2019-01-01T00:00:00.000000+00:00 */
                            start_date?: string;
                            /** @example 2019-01-01T00:00:00.000000+00:00 */
                            end_date?: string;
                            /** @example 0 */
                            duration?: number;
                            project?: {
                                /** @example /projects/2 */
                                self?: string;
                            };
                            /** @example Client Meeting */
                            title?: string;
                            /** @example Some more detailed notes */
                            notes?: string;
                            /** @example true */
                            is_running?: boolean;
                            /** @example Johnny Appleseed */
                            creator_name?: string;
                            custom_fields?: {
                                /** @example field_value */
                                field_name?: string;
                            };
                        };
                        /** @example Timer 'Client Meeting' started. */
                        message?: string;
                    };
                };
            };
        };
    };
    stopTimer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example /time-entries/1 */
                            self?: string;
                            /** @example 2019-01-01T00:00:00.000000+00:00 */
                            start_date?: string;
                            /** @example 2019-01-01T01:00:00.000000+00:00 */
                            end_date?: string;
                            /** @example 3600 */
                            duration?: number;
                            project?: {
                                /** @example /projects/1 */
                                self?: string;
                            };
                            /** @example Client Meeting */
                            title?: string;
                            /** @example Some more detailed notes */
                            notes?: string;
                            /** @example false */
                            is_running?: boolean;
                            /** @example Johnny Appleseed */
                            creator_name?: string;
                            custom_fields?: Record<string, never>;
                        };
                        /** @example Timer 'Client Meeting' stopped. */
                        message?: string;
                    };
                };
            };
        };
    };
    showLatestTimeEntry: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    showRunningTimer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example No running timer found. */
                        message?: string;
                    };
                };
            };
        };
    };
    listTimeEntries: {
        parameters: {
            query?: {
                /**
                 * @description Restricts the query to time entries whose start date is equal to or later than this parameter.
                 * @example 2019-01-01
                 */
                start_date_min?: string;
                /**
                 * @description Restricts the query to time entries whose start date is equal to or earlier than this parameter.
                 * @example 2019-01-01
                 */
                start_date_max?: string;
                /**
                 * @description Restricts the query to time entries associated with the given project. Can be repeated to include time entries from several projects. If you would like to include time entries that are not assigned to any project, you can provide an empty string, i.e. `projects[]=`
                 * @example [
                 *       "/projects/1"
                 *     ]
                 */
                projects?: string[];
                /**
                 * @description If true, the response will also contain time entries that belong to any child projects of the ones provided in `projects[]`. Default: `0`
                 * @example 1
                 */
                include_child_projects?: boolean;
                /**
                 * @description Restricts the query to time entries whose title and/or notes contain all words in this parameter. The search is case-insensitive but diacritic-sensitive.
                 * @example meeting
                 */
                search_query?: string;
                /**
                 * @description If provided, returns only time entries that are either running or not running. Default: `0`
                 * @example 0
                 */
                is_running?: boolean;
                /**
                 * @description If true, the properties of the time entry's project will be included in the response. Default: `0`
                 * @example 1
                 */
                include_project_data?: boolean;
                /**
                 * @description If true, the response will also contain time entries that belong to other team members, provided the current user has permission to view them. Default: `0`
                 * @example 0
                 */
                include_team_members?: boolean;
                /**
                 * @description Restricts the query to data associated with the given user. Can be repeated to include time entries from several users.
                 * @example [
                 *       "/users/1"
                 *     ]
                 */
                team_members?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [
                         *       {
                         *         "self": "/time-entries/1",
                         *         "start_date": "2019-01-01T00:00:00.000000+00:00",
                         *         "end_date": "2019-01-01T01:00:00.000000+00:00",
                         *         "duration": 3600,
                         *         "project": {
                         *           "self": "/projects/1",
                         *           "team_id": null,
                         *           "title": "Project at root level",
                         *           "title_chain": [
                         *             "Project at root level"
                         *           ],
                         *           "color": "#FF0000",
                         *           "productivity_score": 1,
                         *           "is_archived": false,
                         *           "notes": null,
                         *           "parent": null,
                         *           "custom_fields": []
                         *         },
                         *         "title": "Client Meeting",
                         *         "notes": "Some more detailed notes",
                         *         "is_running": false,
                         *         "creator_name": "Johnny Appleseed",
                         *         "custom_fields": []
                         *       }
                         *     ] */
                        data?: {
                            /** @example /time-entries/1 */
                            self?: string;
                            /** @example 2019-01-01T00:00:00.000000+00:00 */
                            start_date?: string;
                            /** @example 2019-01-01T01:00:00.000000+00:00 */
                            end_date?: string;
                            /** @example 3600 */
                            duration?: number;
                            project?: {
                                /** @example /projects/1 */
                                self?: string;
                                /** @example null */
                                team_id?: string;
                                /** @example Project at root level */
                                title?: string;
                                /** @example [
                                 *       "Project at root level"
                                 *     ] */
                                title_chain?: string[];
                                /** @example #FF0000 */
                                color?: string;
                                /** @example 1 */
                                productivity_score?: number;
                                /** @example false */
                                is_archived?: boolean;
                                /** @example null */
                                notes?: string;
                                /** @example null */
                                parent?: string;
                                custom_fields?: Record<string, never>;
                            };
                            /** @example Client Meeting */
                            title?: string;
                            /** @example Some more detailed notes */
                            notes?: string;
                            /** @example false */
                            is_running?: boolean;
                            /** @example Johnny Appleseed */
                            creator_name?: string;
                            custom_fields?: Record<string, never>;
                        }[];
                        links?: {
                            /** @example http://timing-web.test/api/v1/time-entries?start_date_min=2019-01-01&start_date_max=2019-01-01&projects%5B0%5D=%2Fprojects%2F1&include_child_projects=1&search_query=meeting&is_running=0&include_project_data=1&include_team_members=0&team_members%5B0%5D=%2Fusers%2F1&page=1 */
                            first?: string;
                            /** @example http://timing-web.test/api/v1/time-entries?start_date_min=2019-01-01&start_date_max=2019-01-01&projects%5B0%5D=%2Fprojects%2F1&include_child_projects=1&search_query=meeting&is_running=0&include_project_data=1&include_team_members=0&team_members%5B0%5D=%2Fusers%2F1&page=1 */
                            last?: string;
                            /** @example null */
                            prev?: string;
                            /** @example null */
                            next?: string;
                        };
                        meta?: {
                            /** @example 1 */
                            current_page?: number;
                            /** @example 1 */
                            from?: number;
                            /** @example 1 */
                            last_page?: number;
                            /** @example [
                             *       {
                             *         "url": null,
                             *         "label": "&laquo; Previous",
                             *         "active": false
                             *       },
                             *       {
                             *         "url": "http://timing-web.test/api/v1/time-entries?start_date_min=2019-01-01&start_date_max=2019-01-01&projects%5B0%5D=%2Fprojects%2F1&include_child_projects=1&search_query=meeting&is_running=0&include_project_data=1&include_team_members=0&team_members%5B0%5D=%2Fusers%2F1&page=1",
                             *         "label": "1",
                             *         "active": true
                             *       },
                             *       {
                             *         "url": null,
                             *         "label": "Next &raquo;",
                             *         "active": false
                             *       }
                             *     ] */
                            links?: {
                                /** @example null */
                                url?: string;
                                /** @example &laquo; Previous */
                                label?: string;
                                /** @example false */
                                active?: boolean;
                            }[];
                            /** @example http://timing-web.test/api/v1/time-entries */
                            path?: string;
                            /** @example 1000 */
                            per_page?: number;
                            /** @example 1 */
                            to?: number;
                            /** @example 1 */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    createTimeEntry: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The time entry's start date and time.
                     * @example 2019-01-01T00:00:00+00:00
                     */
                    start_date: string;
                    /**
                     * @description The time entry's end date and time.
                     * @example 2019-01-01T01:00:00+00:00
                     */
                    end_date: string;
                    /**
                     * @description The project this time entry is associated with. Can be a project reference in the form `"/projects/1"`, a project title (e.g. `"Project at root level"`), or an array with the project's entire title chain (e.g. `["Project at root level", "Unproductive child project"]`).
                     * @example Unproductive child project
                     */
                    project?: string;
                    /**
                     * @description The time entry's title.
                     * @example Client Meeting
                     */
                    title?: string;
                    /**
                     * @description The time entry's notes.
                     * @example Some more detailed notes
                     */
                    notes?: string;
                    /**
                     * @description If true, any existing time entries that overlap with the new time entry will be adjusted to avoid overlap, or deleted altogether. Defaults to false.
                     * @example false
                     */
                    replace_existing?: boolean;
                    /**
                     * @description A list of custom field name/value pairs to store. For more details, see [Custom fields](#custom-fields).
                     * @example {
                     *       "field_name": "field_value"
                     *     }
                     */
                    custom_fields?: Record<string, never>;
                };
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example /time-entries/2 */
                            self?: string;
                            /** @example 2019-01-01T00:00:00.000000+00:00 */
                            start_date?: string;
                            /** @example 2019-01-01T01:00:00.000000+00:00 */
                            end_date?: string;
                            /** @example 3600 */
                            duration?: number;
                            project?: {
                                /** @example /projects/2 */
                                self?: string;
                            };
                            /** @example Client Meeting */
                            title?: string;
                            /** @example Some more detailed notes */
                            notes?: string;
                            /** @example false */
                            is_running?: boolean;
                            /** @example Johnny Appleseed */
                            creator_name?: string;
                            custom_fields?: {
                                /** @example field_value */
                                field_name?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    showTimeEntry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the activity to display.
                 * @example 1
                 */
                activity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example /time-entries/1 */
                            self?: string;
                            /** @example 2019-01-01T00:00:00.000000+00:00 */
                            start_date?: string;
                            /** @example 2019-01-01T01:00:00.000000+00:00 */
                            end_date?: string;
                            /** @example 3600 */
                            duration?: number;
                            project?: {
                                /** @example /projects/1 */
                                self?: string;
                            };
                            /** @example Client Meeting */
                            title?: string;
                            /** @example Some more detailed notes */
                            notes?: string;
                            /** @example false */
                            is_running?: boolean;
                            /** @example Johnny Appleseed */
                            creator_name?: string;
                            custom_fields?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    updateTimeEntry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the activity to display.
                 * @example 1
                 */
                activity_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The time entry's start date and time.
                     * @example 2019-01-01T00:00:00+00:00
                     */
                    start_date?: string;
                    /**
                     * @description The time entry's start date and time.
                     * @example 2019-01-01T01:00:00+00:00
                     */
                    end_date?: string;
                    /**
                     * @description The project this time entry is associated with. Can be a project reference in the form `"/projects/1"`, a project title (e.g. `"Project at root level"`), or an array with the project's entire title chain (e.g. `["Project at root level", "Unproductive child project"]`).
                     * @example Unproductive child project
                     */
                    project?: string;
                    /**
                     * @description The time entry's title.
                     * @example Client Meeting
                     */
                    title?: string;
                    /**
                     * @description The time entry's notes.
                     * @example Some more detailed notes
                     */
                    notes?: string;
                    /**
                     * @description If true and the entry's start or end date has changed, any existing time entries that overlap with the updated time entry will be adjusted to avoid overlap, or deleted altogether. Defaults to false.
                     * @example false
                     */
                    replace_existing?: boolean;
                    /**
                     * @description A list of custom field name/value pairs to update. For more details, see [Custom fields](#custom-fields).
                     * @example {
                     *       "field_name": "field_value"
                     *     }
                     */
                    custom_fields?: Record<string, never>;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example /time-entries/1 */
                            self?: string;
                            /** @example 2019-01-01T00:00:00.000000+00:00 */
                            start_date?: string;
                            /** @example 2019-01-01T01:00:00.000000+00:00 */
                            end_date?: string;
                            /** @example 3600 */
                            duration?: number;
                            project?: {
                                /** @example /projects/2 */
                                self?: string;
                            };
                            /** @example Client Meeting */
                            title?: string;
                            /** @example Some more detailed notes */
                            notes?: string;
                            /** @example false */
                            is_running?: boolean;
                            /** @example Johnny Appleseed */
                            creator_name?: string;
                            custom_fields?: {
                                /** @example field_value */
                                field_name?: string;
                            };
                        };
                    };
                };
            };
        };
    };
    deleteTimeEntry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the activity to display.
                 * @example 1
                 */
                activity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
